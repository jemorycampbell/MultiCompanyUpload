#requires -version 2

<#
.SYNOPSIS
  Script used to upload a .xml file generated by Southware to Amazon S3 for processing by the ItemExtend web application
.DESCRIPTION
  - Create "Log" directory (if it doesn't exist) and dot include external logging functions
  - Start logs: error and activity, and capture start of script in activity log
  - Load configuration values from external config.xml file into local variables based on command line parameter containing company id
  - Send email indicating the script has started executing
  - Rename the file(s) per the configuration value in the config.xml for the company id
  - Create "ARCHIVE" directory (if it doesn't exist)
  - Copy renamed file(s) to ARCHIVE directory
  - upload renamed files to Amazon S3
  - close out

  - IMPORTANT NOTE: This script is intended to run under Powershell 2 due to the Production environment having Powershell 2
.PARAMETER <Parameter_Name>
    none
.INPUTS
  - .xml file(s) containing stock item data -> it is created by Southware and retrieved from the filesystem
.OUTPUTS
  - .xml file(s) described above is uploaded to Amazon S3
.NOTES
  Version:        1.0
  Author:         Jason E. Campbell
  Creation Date:  6 December 2015
  Purpose/Change: Initial script development

#>

#---------------------------------------------------------[Initialisations]--------------------------------------------------------
#Set Error Action to Silently Continue -> Uncomment for Demo or Prod
$ErrorActionPreference = "SilentlyContinue"

#Script Version
$sScriptVersion = "1.0"

#Set the primary path for the application -> NOTE: This has to be edited during installation and prior to running
$sPrimaryPath = "E:\NetApps\Southware\swm\exmcu" # -> Production Value
#$sPrimaryPath = "C:\Exerve\MultiCompanyUpload" # -> Testing Value

#Check to see if the log directory exists, if not -> create it
$sLogPath = "$sPrimaryPath\Log"
if (!(test-path $sLogPath)) {
    # the try/catch is missing here on purpose
    new-item -Path $sLogPath -ItemType directory
}

#Dot Source required Function Libraries
try {
. "$sPrimaryPath\Logging_Functions.ps1"
} catch {
    #If we can't load the logging functions, then create a .error file indicating the loading of the logging functions failed
    New-Item -Path "$sLogPath\unableToLoadLoggingFunctions.error" -ItemType File -Force
}

#Get the names of the log files to pass to the Log-Error and Log-Write commands
$sErrorLogName = Get-Log -Type "multiCompanyUpload-error" -LogPath $sLogPath -ScriptVersion $sScriptVersion
$sActivityLogName = Get-Log -Type "multiCompanyUpload-activity" -LogPath $sLogPath -ScriptVersion $sScriptVersion
$sErrorLogFile = Join-Path -Path $sLogPath -ChildPath $sErrorLogName
$sActivityLogFile = Join-Path -Path $sLogPath -ChildPath $sActivityLogName

#----------------------------------------------------------[Declarations]----------------------------------------------------------

#-----------------------------------------------------------[Functions]------------------------------------------------------------

Function sendAlertEmail {
    [CmdletBinding()]

    Param (
    [Parameter(Mandatory=$true)][string]$emailTo,
    [Parameter(Mandatory=$true)][string]$emailSubject,
    [Parameter(Mandatory=$true)][string]$emailBody,
    [Parameter(Mandatory=$true)][xml]$xmlConfig
    )

    Process{
        Try{
            $SMTPServer = $xmlConfig.MCUConfig.emailConfig.SMTPServer
            $SMTPPort = $xmlConfig.MCUConfig.emailConfig.SMTPPort
            #$Username = $xmlConfig.MCUConfig.emailConfig.SMTPUsername # -> Testing Value, COMMENT OUT in Production
            #$Password = $xmlConfig.MCUConfig.emailConfig.SMTPPassword # -> Testing Value, COMMENT OUT in Production
            #$to = $xmlConfig.MCUConfig.emailConfig.EmailTo
            $to = $emailTo
            #$cc = $xmlConfig.MCUConfig.emailConfig.EmailCC
            $from = $xmlConfig.MCUConfig.emailConfig.EmailFrom
            $subject = $emailSubject
            $body = $emailBody
            $message = New-Object System.Net.Mail.MailMessage
            $message.subject = $subject
            $message.body = $body
            $message.to.add($to)
            #if ($cc) {
            #    $message.cc.add($cc)
            #}
            $message.from = $from
            #$message.attachments.add($attachment)

            $smtp = New-Object System.Net.Mail.SmtpClient($SMTPServer, $SMTPPort);
            #$smtp.EnableSSL = $true
            #$smtp.Credentials = New-Object System.Net.NetworkCredential($Username, $Password); # -> Testing Value, COMMENT OUT in Production
            $smtp.send($message)
        } Catch {
            $errorTrace = $_.Exception | format-list -force
            Log-Error -LogPath $sErrorLogFile -ErrorDesc ("An error occurred while sending an email: $_ $errorTrace") -ExitGracefully $false
        }
     }
}

#-----------------------------------------------------------[Execution]------------------------------------------------------------

#Get the current date and log the start of execution
$currDate = Get-Date
Log-Write -LogPath $sActivityLogFile -LineValue ("Script execution starting at $currDate")

#Process command line option passed to the script
#Check if no argument is passed on the command line
if ($args.Length -lt 1) {
    Write-Host "A company identifier was not passed on the command line. Please include a company identifier when executing the program. Example: MCUpload.ps1 companyId1"
    Log-Error -LogPath $sErrorLogFile -ErrorDesc "A company identifier was not passed on the command line to the program." -ExitGracefully $True
    Break
#Check if too many arguments are passed on the command line
} elseif ($args.Length -gt 1) {
    Write-Host "Too many parameters were passed on the command line. Please include only one company identifier when executing the program. Example: MCUpload.ps1 companyId1"
    Log-Error -LogPath $sErrorLogFile -ErrorDesc ("Too many parameters passed on the command line to the program: $args") -ExitGracefully $True
    Break
#If just one argument, then assume it's the company id
} else {
    $companyId = $args[0]
}

#Try to load the values from the config.xml, if it fails -> write an error and break
try {
    [xml] $xmlconfig = Get-Content ("$sPrimaryPath\config.xml") -ErrorAction Stop
} catch {
    Write-Host "The contents of the config.xml file could not be loaded."
    $errorTrace = $_.Exception | format-list -force
    Log-Error -LogPath $sErrorLogFile -ErrorDesc ("The contents of the config.xml file could not be loaded: $_ $errorTrace") -ExitGracefully $True
    Break
}

$supportReports = "supportreports@exerve.com" # -> Production Value
$supportAlerts = "supportalerts@exerve.com" # -> Production Value
#$supportReports = "jason.campbell@gmail.com" # -> Testing Value
#$supportAlerts = "jason.campbell@gmail.com" # -> Testing Value
sendAlertEmail -emailTo $supportReports -emailSubject "Multi-Company Upload Script Started with company id: $companyId" -emailBody "Multi-Company Upload Script Started at $currDate" -xmlConfig $xmlconfig

#Check to see if there is a section in the config.xml file corresponding to the company id passed on the command line
If ($xmlconfig.MCUConfig.$companyId) {
    #Check to see if there is a sourceDir value within the company id section of the config.xml
    if ($xmlconfig.MCUConfig.$companyId.sourceDir) {
        $sourceDir = $xmlconfig.MCUConfig.$companyId.sourceDir
       
        #Check to see if the upload directory exists, if not -> there is an error -> DO NOT TRY TO CREATE IT
        if (!(test-path $sourceDir)) {
            Write-Host "The directory contained in the sourceDir element does not exist. Please verify the config.xml"
            Log-Error -LogPath $sErrorLogFile -ErrorDesc ("The directory contained in the sourceDir element does not exist.") -ExitGracefully $True
            Exit
        }
    } else {
        Write-Host "The config.xml file is incorrect - missing sourceDir element."
        Log-Error -LogPath $sErrorLogFile -ErrorDesc ("The config.xml file is incorrect - missing sourceDir element.") -ExitGracefully $True
        Break
    }

    $sArchivePath = "$sourceDir\archive"

    #Check to see if the archive directory exists, if not -> create it
    if (!(test-path $sArchivePath)) {
        try {
            new-item -Path $sArchivePath -ItemType directory
        } catch {
            Write-Host "Unable to create archive directory = $sArchivePath."
            Log-Error -LogPath $sErrorLogFile -ErrorDesc ("Unable to create archive directory - $sArchivePath.") -ExitGracefully $True
            Break
        }
    }

    if ($xmlconfig.MCUConfig.$companyId.renameFormat) {
        $renameFormat = $xmlconfig.MCUConfig.$companyId.renameFormat
        
        $splitRenameFormat = $renameFormat.Split("_")
        $date = Get-Date -format $splitRenameFormat[1]
        $time = Get-Date -format $splitRenameFormat[2]
    } else {
        Write-Host "The config.xml file is incorrect - missing renameFormat element."
        Log-Error -LogPath $sErrorLogFile -ErrorDesc ("The config.xml file is incorrect - missing renameFormat element.") -ExitGracefully $True
        Break
    }
    if ($xmlconfig.MCUConfig.$companyId.upload.uploadMethod) {
        if ($xmlconfig.MCUConfig.$companyId.upload.uploadMethod -eq "S3") {
            if ($xmlconfig.MCUConfig.$companyId.upload.uploadMethodCreds.accessKey) {
                $access = $xmlconfig.MCUConfig.$companyId.upload.uploadMethodCreds.accessKey
            } else {
                Write-Host "The config.xml file is incorrect - missing upload/uploadMethodCreds/accessKey element."
                Log-Error -LogPath $sErrorLogFile -ErrorDesc ("The config.xml file is incorrect - missing upload/uploadMethodCreds/accessKey element.") -ExitGracefully $True
                Break
            }
            if ($xmlconfig.MCUConfig.$companyId.upload.uploadMethodCreds.secretAccessKey) {
                $private = $xmlconfig.MCUConfig.$companyId.upload.uploadMethodCreds.secretAccessKey
            } else {
                Write-Host "The config.xml file is incorrect - missing upload/uploadMethodCreds/secretAccessKey element."
                Log-Error -LogPath $sErrorLogFile -ErrorDesc ("The config.xml file is incorrect - missing upload/uploadMethodCreds/secretAccessKey element.") -ExitGracefully $True
                Break
            }
            if ($xmlconfig.MCUConfig.$companyId.upload.uploadMethodCreds.region) {
                $region = $xmlconfig.MCUConfig.$companyId.upload.uploadMethodCreds.region
            } else {
                Write-Host "The config.xml file is incorrect - missing upload/uploadMethodCreds/region element."
                Log-Error -LogPath $sErrorLogFile -ErrorDesc ("The config.xml file is incorrect - missing upload/uploadMethodCreds/region element.") -ExitGracefully $True
                Break
            }
            if ($xmlconfig.MCUConfig.$companyId.upload.uploadLocation) {
                $uploadLocation = $xmlconfig.MCUConfig.$companyId.upload.uploadLocation
            } else {
                Write-Host "The config.xml file is incorrect - missing upload/uploadLocation element."
                Log-Error -LogPath $sErrorLogFile -ErrorDesc ("The config.xml file is incorrect - missing upload/uploadLocation element.") -ExitGracefully $True
                Break
            }
            if ($xmlconfig.MCUConfig.$companyId.upload.uploadFilenameStrings) {
                $uploadFilenameStrings = $xmlconfig.MCUConfig.$companyId.upload.uploadFilenameStrings
                $uploadFilenameStringHash = @{}
                foreach ($row in $xmlconfig.MCUConfig.$companyId.upload.uploadFilenameStrings.ChildNodes) {
                    $uploadFilenameStringHash.Add($row.Name, $row.InnerText)
                }
            } else {
                Write-Host "The config.xml file is incorrect - missing upload/uploadFilenameStrings element."
                Log-Error -LogPath $sErrorLogFile -ErrorDesc ("The config.xml file is incorrect - missing upload/uploadFilenameStrings element.") -ExitGracefully $True
                Break
            }
        } elseif ($xmlconfig.MCUConfig.$companyId.upload.uploadMethod -eq "ftp") {
            #TO DO: Update the script to use FTP, test with original use cases
        } else {
            Write-Host "The config.xml file is incorrect - upload/uploadMethod element is not supported."
            Log-Error -LogPath $sErrorLogFile -ErrorDesc ("The config.xml file is incorrect - upload/uploadMethod element is not supported.") -ExitGracefully $True
            Break
        }
    } else {
        Write-Host "The config.xml file is incorrect - missing upload/uploadMethod element."
        Log-Error -LogPath $sErrorLogFile -ErrorDesc ("The config.xml file is incorrect - missing upload/uploadMethod element.") -ExitGracefully $True
        Break
    }
} else {
    Write-Host "The parameter passed on the command line does not match an available configured company id. Please verify the company identifier passed to the program."
    Log-Error -LogPath $sErrorLogFile -ErrorDesc ("The parameter passed on the command line does not match an available configured company id. company id = $companyId") -ExitGracefully $True
    Break
}

$localFiles = Get-ChildItem -Path $sourceDir\*.xml -Name
if ($localFiles) {

    # Compare number of local files to the number of expected files from the uploadFilenameStringHash variable
    if (@($localFiles).Length -lt $uploadFilenameStringHash.Count) {
        foreach ($filenameString in $uploadFilenameStringHash.Values) {
            $match = 0
            foreach ($file in $localFiles) {
                if ($file -match $filenameString) {
                    $match = 1
                }
            }
            if (!($match)) {
                $missingFileList += ", " + $filenameString
            }
        }
        sendAlertEmail -emailTo $supportReports -emailSubject "Multi-Company Upload: Files unavailable to upload for Company Id = $companyId " -emailBody "Multi-Company Upload: The following files were unavailable for upload for Company Id = $companyId , $missingFileList" -xmlConfig $xmlconfig
        Log-Error -LogPath $sErrorLogFile -ErrorDesc ("Company Id = $companyId, The following files were unavailable for upload: $missingFileList") -ExitGracefully $True
    }

    try {
        import-module “C:\Program Files (x86)\AWS Tools\PowerShell\AWSPowerShell\AWSPowerShell.psd1”
    } catch {
        Write-Host "Unable to import AWS Powershell module at: C:\Program Files (x86)\AWS Tools\PowerShell\AWSPowerShell\AWSPowerShell.psd1"
        Log-Error -LogPath $sErrorLogFile -ErrorDesc ("Unable to import AWS Powershell module at: C:\Program Files (x86)\AWS Tools\PowerShell\AWSPowerShell\AWSPowerShell.psd1") -ExitGracefully $True
        Break
    }

    # Set credentials
    Set-AWSCredentials -AccessKey $access -SecretKey $private
    Set-DefaultAWSRegion $region
     
    $manifestFileHash = @{}
    foreach ($file in $localFiles) {
        foreach ($filenameString in $uploadFilenameStringHash.Values) {
            if ($file -match $filenameString) {
                try {
                    $splitOrigFile = $file.Split(".")
                    $filename = $splitOrigFile[0]
                    $extension = $splitOrigFile[1]
                    $newFileName = ($filename + "_" + $date + "_" + $time + "." + $extension)
                    Set-Content -path "$sArchivePath\$newFileName" -value ("`<`?xml version`=`"1`.0`" encoding`=`"windows`-1252`" `?`>")
                    Add-Content -path "$sArchivePath\$newFileName" -value (Get-Content "$sourceDir\$file")
                    Write-S3Object -File "$sArchivePath\$newFileName" -Key $newFileName -BucketName $uploadLocation
                    Remove-Item -Force "$sourceDir\$file"
                    $manifestFileHash.Add(($uploadFilenameStringHash.Keys | ? { $uploadFilenameStringHash[$_] -eq $filenameString  }),$newFileName)
                    #Read-S3Object -Verbose -BucketName $uploadLocation -Key $newFileName -File "C:\Exerve\test.xml"
                } catch {
					sendAlertEmail -emailTo $supportReports -emailSubject "Multi-Company Upload: Upload to AWS failed for Company Id = $companyId " -emailBody "Multi-Company Upload: Upload to AWS failed for Company Id = $companyId , file = $newFileName " -xmlConfig $xmlconfig
                    $errorTrace = $_.Exception | format-list -force
                    Log-Error -LogPath $sErrorLogFile -ErrorDesc ("An error occured while processing the file: $newFileName for company id = $companyId ... $_ $errorTrace") -ExitGracefully $True
                    Exit
                }
            }
        }
    }
} else {
    Write-Host "The directory contained in the sourceDir element is empty - there are no files to process. Please verify the config.xml"
	sendAlertEmail -emailTo $supportReports -emailSubject "Multi-Company Upload: The directory contained in the sourceDir element is empty - there are no files to process. Please verify the config.xml for Company Id = $companyId " -emailBody "Multi-Company Upload: The directory contained in the sourceDir element is empty - there are no files to process. Please verify the config.xml for Company Id = $companyId " -xmlConfig $xmlconfig
    Log-Error -LogPath $sErrorLogFile -ErrorDesc ("The directory contained in the sourceDir element is empty - there are no files to process.") -ExitGracefully $True
    Exit
}

# Set the Manifest File Name
$manifestFilepath = ($sArchivePath + "\ixmanifest_" + $date +"_" + $time + ".xml")

# Create The XML Document
$encoding = [System.Text.Encoding]::UTF8
$xmlWriter = New-Object System.Xml.XmlTextWriter($manifestFilepath, $encoding)

# Set The Formatting
$xmlWriter.Formatting = "Indented"
$xmlWriter.Indentation = "4"
 
# Write the XML Decleration
$xmlWriter.WriteStartDocument()

# Write Root Element
$xmlWriter.WriteStartElement("XML")

# Write the Document
$xmlWriter.WriteStartElement("FILENAMES")

foreach ($key in $manifestFileHash.Keys) {
    $xmlWriter.WriteStartElement($key)
    $xmlWriter.WriteCData($manifestFileHash.$key)
    $xmlWriter.WriteEndElement()
}

$xmlWriter.WriteEndElement # <-- Closing FILENAMES

# Write Close Tag for Root Element
$xmlWriter.WriteEndElement # <-- Closing XML
 
# End the XML Document
$xmlWriter.WriteEndDocument()
 
# Finish The Document
$xmlWriter.Finalize
$xmlWriter.Flush
$xmlWriter.Close()

Write-S3Object -Verbose -File ($sArchivePath + "\ixmanifest_" + $date +"_" + $time + ".xml") -Key ("\ixmanifest_" + $date +"_" + $time + ".xml") -BucketName $uploadLocation

$currDate = Get-Date
Log-Write -LogPath $sActivityLogFile -LineValue ("Script execution ending at $currDate")
sendAlertEmail -emailTo $supportReports -emailSubject "Multi-Company Upload Script Ended with company id: $companyId" -emailBody "Multi-Company Upload Script execution ended at $currDate" -xmlConfig $xmlconfig

# Send PushMon Link
$urlstring = "http://pshmn.com/WT3nVE"
(new-object System.Net.WebClient).DownloadString($urlstring)